{"version":3,"sources":["lib/CacheRoute.js","pages/a.js","pages/b.js","App.js","index.js"],"names":["window","history","scrollRestoration","deepCopy","obj","JSON","parse","stringify","CacheRoute","visible","matchCount","scrollTop","$pageElement","pageRef","React","createRef","lastProps","lastState","shouldComponentUpdate","getPageVisible","$CacheRouteInjectPageElement","$instance","getBodyScrollTop","document","scrollingElement","documentElement","restoreScrollInfoIfShowPage","lastVisible","setTimeout","scrollTo","current","componentDidShow","storeScrollInfoIfLeavePage","componentWillHide","props","state","render","Component","component","restProps","children","match","style","display","ref","A","console","log","componentDidMount","componentWillUnmount","onClick","push","B","App","path","PageA","PageB","ReactDOM","getElementById"],"mappings":"mQAIEA,OAAOC,SACPD,OAAOC,QAAQC,mBACsB,SAArCF,OAAOC,QAAQC,oBAEfF,OAAOC,QAAQC,kBAAoB,UAGrC,IAAMC,EAAW,SAAAC,GAAG,OAAIC,KAAKC,MAAMD,KAAKE,UAAUH,KAqGnCI,E,2MAlGbC,SAAU,E,EACVC,WAAa,E,EACbC,UAAY,E,EACZC,aAAe,K,EACfC,QAAUC,IAAMC,Y,EAEhBC,UAAY,G,EACZC,UAAY,G,EAGZC,sBAAwB,WACtB,OAAO,G,EAGTC,eAAiB,WACf,OAAO,EAAKV,S,EAGdW,6BAA+B,SAAAC,GAC7B,EAAKT,aAAeS,G,EAGtBC,iBAAmB,WAEjB,OADWC,SAASC,kBAAoBD,SAASE,iBACvCd,W,EAGZe,4BAA8B,SAAAC,GACxB,EAAKlB,UAAYkB,GACnBC,YAAW,YACEL,SAASC,kBAAoBD,SAASE,iBAC9CI,SAAS,EAAG,EAAKlB,WAEpB,IAAMC,EAAe,EAAKA,cAAgB,EAAKC,QAAQiB,QAQrD,EAAKpB,WAAa,GAClBE,GACAA,EAAamB,kBAEbnB,EAAamB,iBAAiB,EAAKf,UAAW,EAAKC,aAEpD,I,EAIPe,2BAA6B,SAAAL,GAC3B,IAAK,EAAKlB,SAAWkB,EAAa,CAChC,EAAKhB,UAAY,EAAKW,mBACtB,IAAMV,EAAe,EAAKA,cAAgB,EAAKC,QAAQiB,QAEnDlB,GAAgBA,EAAaqB,oBAC/B,EAAKjB,UAAYb,EAASS,EAAasB,OACvC,EAAKjB,UAAYd,EAASS,EAAauB,OACvCvB,EAAaqB,uB,EAKnBG,OAAS,WAAO,IAAD,EACkC,EAAKF,MAAjCG,EADN,EACLC,UAAyBC,EADpB,6BAEb,OACE,kBAAC,IAAD,iBACMA,EADN,CAEEC,SAAU,YAA8B,IAA3BC,EAA0B,EAA1BA,MAAUF,EAAgB,yBAC/BZ,EAAc,EAAKlB,QAYzB,OAVIgC,GACF,EAAKhC,SAAU,EACf,EAAKC,cAEL,EAAKD,SAAU,EAGjB,EAAKuB,2BAA2BL,GAChC,EAAKD,4BAA4BC,GAE1B,EAAKjB,WAAa,EACvB,yBAAKgC,MAAO,CAAEC,QAAS,EAAKlC,QAAU,QAAU,SAC9C,kBAAC4B,EAAD,iBACME,EADN,CAEEpB,eAAgB,EAAKA,eACrBC,6BAA8B,EAAKA,6BACnCwB,IAAK,EAAK/B,YAGZ,U,6BA5FWwB,aCqBVQ,E,2MA/Bbd,iBAAmB,SAACf,EAAWC,GAC7B6B,QAAQC,IAAI,sBACZD,QAAQC,IAAI,aAAc/B,EAAW,aAAcC,I,EAGrD+B,kBAAoB,WAClBF,QAAQC,IAAI,wB,EAGdd,kBAAoB,WAClBa,QAAQC,IAAI,wB,EAGdE,qBAAuB,a,EAKvBb,OAAS,WACP,OACE,6BACE,sCACA,6BACE,iCAEF,4BAAQc,QAAS,kBAAM,EAAKhB,MAAMjC,QAAQkD,KAAK,QAA/C,e,6BA1BQrC,IAAMuB,WCcPe,E,2MAbbhB,OAAS,WACP,OACE,6BACE,sCACA,6BACE,iCAEF,4BAAQc,QAAS,kBAAM,EAAKhB,MAAMjC,QAAQkD,KAAK,QAA/C,e,6BARQrC,IAAMuB,WCaPgB,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAYC,KAAK,KAAKhB,UAAWiB,IACjC,kBAAC,IAAD,CAAOD,KAAK,KAAKhB,UAAWkB,MCNlCC,IAASrB,OAAO,kBAAC,EAAD,MAASb,SAASmC,eAAe,W","file":"static/js/main.f6b70cea.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\n\nif (\n  window.history &&\n  window.history.scrollRestoration &&\n  window.history.scrollRestoration === \"auto\"\n) {\n  window.history.scrollRestoration = \"manual\";\n}\n\nconst deepCopy = obj => JSON.parse(JSON.stringify(obj));\n\nclass CacheRoute extends Component {\n  visible = false; // 默认不展示组件\n  matchCount = 0; // 每一次match到路由，都会自加1\n  scrollTop = 0; // 用于保存滚动高度信息\n  $pageElement = null; // 页面元素实例\n  pageRef = React.createRef();\n\n  lastProps = {};\n  lastState = {};\n\n  // 防止因父层render对本层造成影响\n  shouldComponentUpdate = () => {\n    return false;\n  };\n\n  getPageVisible = () => {\n    return this.visible;\n  };\n\n  $CacheRouteInjectPageElement = $instance => {\n    this.$pageElement = $instance;\n  };\n\n  getBodyScrollTop = () => {\n    const el = document.scrollingElement || document.documentElement;\n    return el.scrollTop;\n  };\n\n  restoreScrollInfoIfShowPage = lastVisible => {\n    if (this.visible && !lastVisible) {\n      setTimeout(() => {\n        const el = document.scrollingElement || document.documentElement;\n        el.scrollTo(0, this.scrollTop);\n\n        const $pageElement = this.$pageElement || this.pageRef.current;\n\n        /**\n         * componentDidShow在componentDidUpdate后触发\n         * 当触发componentDidShow的时候，滚动条位置已经恢复\n         * 第一次进入页面，不会执行componentDidShould\n         */\n        if (\n          this.matchCount > 1 &&\n          $pageElement &&\n          $pageElement.componentDidShow\n        ) {\n          $pageElement.componentDidShow(this.lastProps, this.lastState);\n        }\n      }, 0);\n    }\n  };\n\n  storeScrollInfoIfLeavePage = lastVisible => {\n    if (!this.visible && lastVisible) {\n      this.scrollTop = this.getBodyScrollTop();\n      const $pageElement = this.$pageElement || this.pageRef.current;\n\n      if ($pageElement && $pageElement.componentWillHide) {\n        this.lastProps = deepCopy($pageElement.props);\n        this.lastState = deepCopy($pageElement.state);\n        $pageElement.componentWillHide();\n      }\n    }\n  };\n\n  render = () => {\n    const { component: Component, ...restProps } = this.props;\n    return (\n      <Route\n        {...restProps}\n        children={({ match, ...restProps }) => {\n          const lastVisible = this.visible;\n\n          if (match) {\n            this.visible = true;\n            this.matchCount++;\n          } else {\n            this.visible = false;\n          }\n\n          this.storeScrollInfoIfLeavePage(lastVisible);\n          this.restoreScrollInfoIfShowPage(lastVisible);\n\n          return this.matchCount > 0 ? (\n            <div style={{ display: this.visible ? \"block\" : \"none\" }}>\n              <Component\n                {...restProps}\n                getPageVisible={this.getPageVisible}\n                $CacheRouteInjectPageElement={this.$CacheRouteInjectPageElement}\n                ref={this.pageRef}\n              />\n            </div>\n          ) : null;\n        }}\n      />\n    );\n  };\n}\n\nexport default CacheRoute;\n","import React from \"react\";\n\nclass A extends React.Component {\n  componentDidShow = (lastProps, lastState) => {\n    console.log(\"component did show\");\n    console.log(\"lastProps:\", lastProps, \"lastState:\", lastState);\n  };\n\n  componentDidMount = () => {\n    console.log(\"component did mount\");\n  };\n\n  componentWillHide = () => {\n    console.log(\"component will hide\");\n  };\n\n  componentWillUnmount = () => {\n    // componentWillUnmount将失效\n    // 业务逻辑需要移动到componentWillHide\n  };\n\n  render = () => {\n    return (\n      <div>\n        <h1>Page A</h1>\n        <div>\n          <input />\n        </div>\n        <button onClick={() => this.props.history.push(\"/b\")}>go page b</button>\n      </div>\n    );\n  };\n}\n\nexport default A;\n","import React from \"react\";\n\nclass B extends React.Component {\n  render = () => {\n    return (\n      <div>\n        <h1>Page B</h1>\n        <div>\n          <input />\n        </div>\n        <button onClick={() => this.props.history.push('/a')}>go page a</button>\n      </div>\n    )\n  };\n}\n\nexport default B;\n","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport CacheRoute from './lib/CacheRoute';\nimport PageA from \"./pages/a\";\nimport PageB from \"./pages/b\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <CacheRoute path=\"/a\" component={PageA} />\n      <Route path=\"/b\" component={PageB} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}